#!/usr/bin/env ruby

#
# digital normalisation using ruby cm-sketch
#

require 'mytest/mytest.so'
require 'trollop'

opts = Trollop::options do
  banner <<-EOS

Diginorm v0.2 by Chris Boursnell <cmb211@cam.ac.uk>

Digital Normalisation by median
Totally ripped off from Titus Brown (http://khmer.readthedocs.org/en/v1.1/)

USAGE:
diginorm <options>

OPTIONS:

EOS
  opt :left,
      "Comma separated list of fastq files (left)",
      :required => true,
      :type => String

  opt :right,
      "Comma separated list of fastq files (right) (optional)",
      :type => String

  opt :k,
      "size of kmers to use",
      :default => 21,
      :type => :int

  opt :tables,
      "number of tables",
      :default => 4,
      :type => :int

  opt :table_size,
      "size of tables",
      :short => 's',
      :type => :int

  opt :memory,
      "memory in gigabytes",
      :short => 'm',
      :type => :float

  opt :cutoff,
      "cutoff coverage",
      :default => 20,
      :type => :int

end

if !opts.memory and !opts.table_size
  Trollop::die "Must set either memory usage or table size"
end

Trollop::die "Cutoff must be less than 255" if opts.cutoff >= 255

if opts.table_size
  memory = opts.table_size * opts.tables
  table_size = opts.table_size
elsif opts.memory
  table_size = (1e9*opts.memory/opts.tables).to_i
  memory = (1e9*opts.memory).to_i
end

puts "memory : #{memory/1e9}GB"
puts "table size : #{table_size/1e9} billion"

cms = MyTest.new(opts.k, table_size, opts.tables, opts.cutoff)

paired = false
if opts.right
  input = opts.left.split(",").zip(opts.right.split(","))
  paired = true
else
  input = opts.left.split(",")
end

input.each do |pair|
  if paired
    unless File.exist?("#{pair[0]}")
      raise IOError.new("File not found: #{pair[0]}")
    end
    unless File.exist?("#{pair[1]}")
      raise IOError.new("File not found: #{pair[1]}")
    end
    if File.exist?("#{pair[0]}.out")
      raise IOError.new("Output already exists: #{pair[0]}.out")
    end
    if File.exist?("#{pair[1]}.out")
      raise IOError.new("Output already exists: #{pair[1]}.out")
    end
  else
    unless File.exist?("#{pair}")
      raise IOError.new("File not found: #{pair}")
    end
    if File.exist?("#{pair}.out")
      raise IOError.new("Output already exists: #{pair}.out")
    end
  end
end

input.each do |pair|
  if paired
    cms.run_pair(pair[0], pair[1]) # call to c
  else
    cms.run(pair)
  end
end